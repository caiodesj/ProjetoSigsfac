import { ApplicationRef, ComponentFactoryResolver, Injector, TemplateRef, Type, ViewContainerRef } from '@angular/core';
import { Content, ViewRef } from './types';
import { TplRef } from './template-ref';
import { StringRef } from './string-ref';
import { CompRef } from './comp-ref';
import * as i0 from "@angular/core";
interface _ViewOptions {
    vcr?: ViewContainerRef | undefined;
}
interface CompViewOptions extends _ViewOptions {
    injector?: Injector | undefined;
}
interface TemplateViewOptions extends _ViewOptions {
    context?: Record<string, any> | undefined;
}
export declare type ViewOptions = _ViewOptions & CompViewOptions & TemplateViewOptions;
export declare class ViewService {
    private resolver;
    private injector;
    private appRef;
    constructor(resolver: ComponentFactoryResolver, injector: Injector, appRef: ApplicationRef);
    createComponent<C>(component: Type<C>, options?: CompViewOptions): CompRef<C>;
    createTemplate<C>(tpl: TemplateRef<C>, options?: TemplateViewOptions): TplRef<Record<string, any>>;
    createView<T>(content: Type<T>, viewOptions: CompViewOptions): CompRef<T>;
    createView<T>(content: TemplateRef<T>, viewOptions: TemplateViewOptions): TplRef<T>;
    createView(content: string): StringRef;
    createView(content: Content, viewOptions: ViewOptions): ViewRef;
    static ɵfac: i0.ɵɵFactoryDeclaration<ViewService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ViewService>;
}
export {};
