{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/router\";\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    /**\n     * Constructor\n     */\n    constructor(_authService, _router) {\n      this._authService = _authService;\n      this._router = _router;\n    }\n    /**\n     * Intercept\n     *\n     * @param req\n     * @param next\n     */\n\n\n    intercept(req, next) {\n      // Clone the request object\n      let newReq = req.clone(); // Request\n      // If the access token didn't expire, add the Authorization header.\n      // We won't add the Authorization header if the access token expired.\n      // This will force the server to return a \"401 Unauthorized\" response\n      // for the protected API routes which our response interceptor will\n      // catch and delete the access token from the local storage while logging\n      // the user out from the app.\n      // Response\n\n      return next.handle(this.setHeaders(newReq)).pipe(catchError(response => {\n        //         if( response instanceof HttpErrorResponse && response.error.status == 401){\n        //   // Sign out\n        //   this._authService.signOut();\n        //   // Reload the app\n        //   location.reload();\n        // }\n        if (response.error && response.error === 'Error' && response.description === 'No Token Found') {\n          // Sign out\n          this._authService.signOut(); // Reload the app\n\n\n          location.reload();\n        }\n\n        return throwError(response);\n      }));\n    }\n    /**\n     * That function is used to set headers keys\n     * @param request\n     * @returns\n     */\n\n\n    setHeaders(request) {\n      let headers = new HttpHeaders().set('token', this._authService.accessToken);\n      return request.clone({\n        headers: headers\n      });\n    }\n\n  }\n\n  AuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac\n  });\n  return AuthInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}