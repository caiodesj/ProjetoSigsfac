{"ast":null,"code":"import { CdkTableModule } from '@angular/cdk/table';\nimport { NgModule, ɵɵdefineInjectable, Injectable, InjectionToken, ɵɵinject, Optional, Inject, INJECTOR, Injector, EventEmitter, Directive, Renderer2, Input, Output } from '@angular/core';\nimport { __awaiter } from 'tslib';\nimport { saveAs } from 'file-saver-es';\nimport * as ɵngcc0 from '@angular/core';\nlet CdkTableExporterModule = /*#__PURE__*/(() => {\n  class CdkTableExporterModule {}\n\n  CdkTableExporterModule.ɵfac = function CdkTableExporterModule_Factory(t) {\n    return new (t || CdkTableExporterModule)();\n  };\n\n  CdkTableExporterModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: CdkTableExporterModule\n  });\n  CdkTableExporterModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CdkTableModule]]\n  });\n  return CdkTableExporterModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkTableExporterModule, {\n    imports: function () {\n      return [CdkTableModule];\n    }\n  });\n})();\n\nvar ExportType = /*#__PURE__*/(() => {\n  (function (ExportType) {\n    ExportType[\"XLS\"] = \"xls\";\n    ExportType[\"XLSX\"] = \"xlsx\";\n    ExportType[\"CSV\"] = \"csv\";\n    ExportType[\"TXT\"] = \"txt\";\n    ExportType[\"JSON\"] = \"json\";\n    ExportType[\"OTHER\"] = \"other\";\n  })(ExportType || (ExportType = {}));\n\n  return ExportType;\n})();\nlet DataExtractorService = /*#__PURE__*/(() => {\n  class DataExtractorService {\n    constructor() {}\n\n    extractRows(cdkTable, hiddenColumns, outlet) {\n      return this.getRowsAsJsonArray(cdkTable, hiddenColumns, outlet !== null && outlet !== void 0 ? outlet : cdkTable._rowOutlet);\n    }\n\n    getRowsAsJsonArray(cdkTable, hiddenColumns, outlet) {\n      const renderedRows = this.getRenderedRows(cdkTable, outlet);\n      return this.convertToJsonArray(hiddenColumns, renderedRows);\n    }\n\n    getRenderedRows(cdkTable, outlet) {\n      return cdkTable._getRenderedRows(outlet);\n    }\n\n    convertToJsonArray(hiddenColumns, rows) {\n      const result = new Array(); // tslint:disable-next-line:prefer-for-of\n\n      for (let i = 0; i < rows.length; i++) {\n        const row = this.convertRow(hiddenColumns, rows[i]);\n        result.push(this.createExcelItem(row));\n      }\n\n      return result;\n    }\n\n    convertRow(hiddenColumns, row) {\n      const result = new Array();\n      const cells = row.children;\n\n      for (let i = 0; i < cells.length; i++) {\n        if (!this.shouldHide(hiddenColumns, i)) {\n          const element = cells.item(i).innerText.trim();\n          result.push(element);\n        }\n      }\n\n      return result;\n    }\n\n    shouldHide(hiddenColumns, columnIndex) {\n      if (hiddenColumns && hiddenColumns.includes(columnIndex)) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    createExcelItem(row) {\n      return Object.assign({}, row);\n    }\n\n  }\n\n  DataExtractorService.ɵfac = function DataExtractorService_Factory(t) {\n    return new (t || DataExtractorService)();\n  };\n\n  DataExtractorService.ɵprov = ɵɵdefineInjectable({\n    factory: function DataExtractorService_Factory() {\n      return new DataExtractorService();\n    },\n    token: DataExtractorService,\n    providedIn: \"root\"\n  });\n  return DataExtractorService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nclass Mime {\n  constructor(extension, contentTypeHeader) {\n    this.extension = extension;\n    this.contentTypeHeader = contentTypeHeader;\n  }\n\n}\n\nconst MAT_TABLE_EXPORTER = 'mat-table-exporter';\nconst TYPE_ARRAY = 'array';\nconst CHAR_SET_UTF = ';charset=utf-';\nconst CHAR_SET_UTF_8 = CHAR_SET_UTF + '8';\nconst CONTENT_TYPE_TEXT = ExportType.TXT + '/';\nconst CONTENT_TYPE_APPLICATION = 'application/';\nconst CONTENT_TYPE_EXCEL = CONTENT_TYPE_APPLICATION + 'octet-stream';\nconst DOT = '.';\nconst COMMA = ',';\nconst EXTENSION_XLS = DOT + ExportType.XLS;\nconst EXTENSION_XLSX = DOT + ExportType.XLSX;\nconst EXTENSION_CSV = DOT + ExportType.CSV;\nconst EXTENSION_JSON = DOT + ExportType.JSON;\nconst EXTENSION_TEXT = DOT + ExportType.TXT;\nconst MIME_EXCEL_XLS = new Mime(EXTENSION_XLS, CONTENT_TYPE_EXCEL + CHAR_SET_UTF_8);\nconst MIME_EXCEL_XLSX = new Mime(EXTENSION_XLSX, CONTENT_TYPE_EXCEL + CHAR_SET_UTF_8);\nconst MIME_JSON = new Mime(EXTENSION_JSON, CONTENT_TYPE_TEXT + JSON + CHAR_SET_UTF_8);\nconst MIME_TXT = new Mime(EXTENSION_TEXT, CONTENT_TYPE_TEXT + ExportType.TXT + CHAR_SET_UTF_8);\nconst MIME_CSV = new Mime(EXTENSION_CSV, CONTENT_TYPE_TEXT + ExportType.CSV + CHAR_SET_UTF_8);\nconst REF = '!ref';\nconst XLS_REGEX = DOT + '*\\.' + ExportType.XLS + '$';\nconst RETURN = '\\n';\nconst TAB = '\\t';\nconst XLSX_COLS = '!cols';\nconst BOM = '\\uFEFF';\nconst XLSX_LIGHTWEIGHT = new InjectionToken('XLSX_LIGHTWEIGHT');\n\nclass FileUtil {\n  static save(content, mime, options) {\n    const blob = new Blob([content], {\n      type: mime.contentTypeHeader\n    });\n    let fileName = MAT_TABLE_EXPORTER;\n\n    if (options && options.fileName) {\n      fileName = options.fileName;\n    }\n\n    saveAs(blob, fileName + mime.extension);\n  }\n\n  static isXls(fileName) {\n    return fileName.toLowerCase().match(XLS_REGEX) != null;\n  }\n\n  static identifyExportType(fileName) {\n    if (fileName && FileUtil.isXls(fileName)) {\n      return ExportType.XLS;\n    } else {\n      return ExportType.XLSX;\n    }\n  }\n\n  static removeExtension(options) {\n    options.fileName = options.fileName.split(DOT)[0];\n  }\n\n}\n\nclass FileExporter {\n  constructor() {}\n\n  export(rows, options) {\n    if (!rows) {\n      throw new Error('Empty json array is provided, rows parameter is mandatory!');\n    }\n\n    const mimeType = this.getMimeType();\n    this.createContent(rows, options).then(content => {\n      FileUtil.save(content, mimeType, options);\n    });\n  }\n\n}\n/**\r\n * An angular service class that is used to create files out of json object arrays.\r\n */\n\n\nclass WorksheetExporter extends FileExporter {\n  constructor(sheetJsHelper) {\n    super();\n    this.sheetJsHelper = sheetJsHelper;\n  }\n\n  createContent(rows, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const workSheet = (yield this.sheetJsHelper.getXlsx()).utils.json_to_sheet(rows, {\n        skipHeader: true // we don't want to see object properties as our headers\n\n      });\n      return yield this.workSheetToContent(workSheet, options);\n    });\n  }\n\n}\n\nlet SheetjsHelperService = /*#__PURE__*/(() => {\n  class SheetjsHelperService {\n    constructor(xlsxLightweight) {\n      this.xlsxLightweight = xlsxLightweight;\n    }\n\n    getXlsx() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.xlsxLightweight) {\n          return yield import('xlsx/dist/xlsx.mini.min');\n        } else {\n          return yield import('xlsx');\n        }\n      });\n    }\n\n  }\n\n  SheetjsHelperService.ɵfac = function SheetjsHelperService_Factory(t) {\n    return new (t || SheetjsHelperService)(ɵngcc0.ɵɵinject(XLSX_LIGHTWEIGHT, 8));\n  };\n\n  SheetjsHelperService.ɵprov = ɵɵdefineInjectable({\n    factory: function SheetjsHelperService_Factory() {\n      return new SheetjsHelperService(ɵɵinject(XLSX_LIGHTWEIGHT, 8));\n    },\n    token: SheetjsHelperService,\n    providedIn: \"root\"\n  });\n  return SheetjsHelperService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet CsvExporterService = /*#__PURE__*/(() => {\n  class CsvExporterService extends WorksheetExporter {\n    constructor(sheetJsHelper) {\n      super(sheetJsHelper);\n    }\n\n    workSheetToContent(worksheet, options) {\n      var _a;\n\n      return __awaiter(this, void 0, void 0, function* () {\n        const content = (yield this.sheetJsHelper.getXlsx()).utils.sheet_to_csv(worksheet, {\n          FS: (_a = options === null || options === void 0 ? void 0 : options.delimiter) !== null && _a !== void 0 ? _a : COMMA\n        });\n        return BOM + content;\n      });\n    }\n\n    getMimeType() {\n      return MIME_CSV;\n    }\n\n  }\n\n  CsvExporterService.ɵfac = function CsvExporterService_Factory(t) {\n    return new (t || CsvExporterService)(ɵngcc0.ɵɵinject(SheetjsHelperService));\n  };\n\n  CsvExporterService.ɵprov = ɵɵdefineInjectable({\n    factory: function CsvExporterService_Factory() {\n      return new CsvExporterService(ɵɵinject(SheetjsHelperService));\n    },\n    token: CsvExporterService,\n    providedIn: \"root\"\n  });\n  return CsvExporterService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet TxtExporterService = /*#__PURE__*/(() => {\n  class TxtExporterService extends FileExporter {\n    constructor() {\n      super();\n    }\n\n    createContent(rows, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let content = '';\n        rows.forEach(element => {\n          content += Object.values(element).join(this.getDelimiter(options)) + RETURN;\n        });\n        return content;\n      });\n    }\n\n    getMimeType() {\n      return MIME_TXT;\n    }\n\n    getDelimiter(options) {\n      if (options && options.delimiter) {\n        return options.delimiter;\n      } else {\n        return TAB;\n      }\n    }\n\n  }\n\n  TxtExporterService.ɵfac = function TxtExporterService_Factory(t) {\n    return new (t || TxtExporterService)();\n  };\n\n  TxtExporterService.ɵprov = ɵɵdefineInjectable({\n    factory: function TxtExporterService_Factory() {\n      return new TxtExporterService();\n    },\n    token: TxtExporterService,\n    providedIn: \"root\"\n  });\n  return TxtExporterService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet XlsExporterService = /*#__PURE__*/(() => {\n  class XlsExporterService extends WorksheetExporter {\n    constructor(sheetJsHelper) {\n      super(sheetJsHelper);\n    }\n\n    workSheetToContent(worksheet, options = {}) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const {\n          utils,\n          write\n        } = yield this.sheetJsHelper.getXlsx();\n        const workBook = utils.book_new();\n\n        if (options.columnWidths) {\n          worksheet[XLSX_COLS] = this.convertToWch(options.columnWidths);\n        }\n\n        this.correctTypes(options);\n        utils.book_append_sheet(workBook, worksheet, options.sheet);\n        return write(workBook, options);\n      });\n    }\n\n    getMimeType() {\n      return MIME_EXCEL_XLS;\n    }\n\n    correctTypes(options) {\n      if (!options.type) {\n        options.type = TYPE_ARRAY;\n      }\n\n      options.bookType = this.getMimeType().extension.replace('.', ''); // sheetjs requires bookingType for excel format\n    }\n\n    convertToWch(columnWidths) {\n      return columnWidths.map(width => ({\n        wch: width\n      }));\n    }\n\n  }\n\n  XlsExporterService.ɵfac = function XlsExporterService_Factory(t) {\n    return new (t || XlsExporterService)(ɵngcc0.ɵɵinject(SheetjsHelperService));\n  };\n\n  XlsExporterService.ɵprov = ɵɵdefineInjectable({\n    factory: function XlsExporterService_Factory() {\n      return new XlsExporterService(ɵɵinject(SheetjsHelperService));\n    },\n    token: XlsExporterService,\n    providedIn: \"root\"\n  });\n  return XlsExporterService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet JsonExporterService = /*#__PURE__*/(() => {\n  class JsonExporterService extends FileExporter {\n    constructor() {\n      super();\n    }\n\n    createContent(rows, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return JSON.stringify(rows);\n      });\n    }\n\n    getMimeType() {\n      return MIME_JSON;\n    }\n\n  }\n\n  JsonExporterService.ɵfac = function JsonExporterService_Factory(t) {\n    return new (t || JsonExporterService)();\n  };\n\n  JsonExporterService.ɵprov = ɵɵdefineInjectable({\n    factory: function JsonExporterService_Factory() {\n      return new JsonExporterService();\n    },\n    token: JsonExporterService,\n    providedIn: \"root\"\n  });\n  return JsonExporterService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet XlsxExporterService = /*#__PURE__*/(() => {\n  class XlsxExporterService extends XlsExporterService {\n    constructor(sheetJsHelper) {\n      super(sheetJsHelper);\n    } // override\n\n\n    getMimeType() {\n      return MIME_EXCEL_XLSX;\n    }\n\n  }\n\n  XlsxExporterService.ɵfac = function XlsxExporterService_Factory(t) {\n    return new (t || XlsxExporterService)(ɵngcc0.ɵɵinject(SheetjsHelperService));\n  };\n\n  XlsxExporterService.ɵprov = ɵɵdefineInjectable({\n    factory: function XlsxExporterService_Factory() {\n      return new XlsxExporterService(ɵɵinject(SheetjsHelperService));\n    },\n    token: XlsxExporterService,\n    providedIn: \"root\"\n  });\n  return XlsxExporterService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ServiceLocatorService = /*#__PURE__*/(() => {\n  class ServiceLocatorService {\n    constructor(injector) {\n      this.injector = injector;\n    }\n\n    getService(exportType) {\n      switch (exportType) {\n        case ExportType.XLS.valueOf():\n          return this.injector.get(XlsExporterService);\n\n        case ExportType.XLSX.valueOf():\n          return this.injector.get(XlsxExporterService);\n\n        case ExportType.JSON.valueOf():\n          return this.injector.get(JsonExporterService);\n\n        case ExportType.TXT.valueOf():\n          return this.injector.get(TxtExporterService);\n\n        case ExportType.CSV.valueOf():\n          return this.injector.get(CsvExporterService);\n\n        case ExportType.OTHER.valueOf():\n          return null;\n\n        default:\n          return this.injector.get(XlsxExporterService);\n      }\n    }\n\n  }\n\n  ServiceLocatorService.ɵfac = function ServiceLocatorService_Factory(t) {\n    return new (t || ServiceLocatorService)(ɵngcc0.ɵɵinject(ɵngcc0.Injector));\n  };\n\n  ServiceLocatorService.ɵprov = ɵɵdefineInjectable({\n    factory: function ServiceLocatorService_Factory() {\n      return new ServiceLocatorService(ɵɵinject(INJECTOR));\n    },\n    token: ServiceLocatorService,\n    providedIn: \"root\"\n  });\n  return ServiceLocatorService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * Exporter class for CdkTable. Abstracts the varying behaviors among different CdkTable implementations.\r\n */\n\n\nlet CdkTableExporter = /*#__PURE__*/(() => {\n  class CdkTableExporter {\n    constructor(renderer, serviceLocator, dataExtractor, _cdkTable) {\n      this.renderer = renderer;\n      this.serviceLocator = serviceLocator;\n      this.dataExtractor = dataExtractor;\n      this._cdkTable = _cdkTable;\n      this.exportCompleted = new EventEmitter();\n      this.exportStarted = new EventEmitter();\n    }\n    /**\r\n     * Triggers page event chain thus extracting and exporting all the rows in nativetables in pages\r\n     */\n\n\n    exportTable(exportType, options) {\n      this.loadExporter(exportType);\n      this._options = options;\n      this.exportStarted.emit();\n      this._isIterating = true;\n      this._isExporting = true;\n      this._data = new Array();\n      this.extractTableHeader();\n\n      try {\n        this.exportWithPagination();\n      } catch (notPaginated) {\n        this.exportSinglePage();\n      }\n    }\n\n    toggleRow(index) {\n      const paginatedRowIndex = this.getPaginatedRowIndex(index);\n\n      if (this.isToggleOn(paginatedRowIndex)) {\n        this.toggleOff(paginatedRowIndex);\n      } else {\n        this.toggleOn(paginatedRowIndex);\n      }\n    }\n    /**\r\n     * This event will clear rows selection done using toggleRow functionality\r\n     */\n\n\n    resetToggleRows() {\n      this._selectedRows = [];\n    }\n\n    toggleOn(index) {\n      this._selectedRows = [...(this._selectedRows || []), index];\n    }\n\n    toggleOff(index) {\n      this._selectedRows = this._selectedRows.filter(x => x !== index);\n    }\n\n    isToggleOn(index) {\n      var _a;\n\n      return (_a = this._selectedRows) === null || _a === void 0 ? void 0 : _a.includes(index);\n    }\n\n    loadExporter(exportType) {\n      if (exportType === ExportType.OTHER.valueOf()) {\n        this._exporterService = this.exporter;\n      } else {\n        this._exporterService = this.serviceLocator.getService(exportType);\n      }\n    }\n\n    exportWithPagination() {\n      this._initialPageIndex = this.getCurrentPageIndex();\n      this.initPageHandler();\n      this.goToPage(0);\n    }\n\n    exportSinglePage() {\n      this.extractDataOnCurrentPage();\n      this.extractTableFooter();\n      this.exportExtractedData();\n    }\n\n    extractDataOnCurrentPage() {\n      const rows = this.dataExtractor.extractRows(this._cdkTable, this.hiddenColumns);\n      this._data = this._data.concat(this.getSelectedRows(rows));\n    }\n\n    getSelectedRows(rows) {\n      if (this.isSelectiveExport()) {\n        return rows.filter((_, i) => this._selectedRows.includes(this.getPaginatedRowIndex(i)));\n      } else {\n        return rows;\n      }\n    }\n\n    isSelectiveExport() {\n      return this._selectedRows && !this.isMasterToggleOff() && !this.isMasterToggleOn();\n    }\n\n    isMasterToggleOn() {\n      return this.compareSelectedRowCount(this.getTotalItemsCount());\n    }\n\n    isMasterToggleOff() {\n      return this.compareSelectedRowCount(0);\n    }\n\n    compareSelectedRowCount(rowCount) {\n      var _a;\n\n      return !!(((_a = this._selectedRows) === null || _a === void 0 ? void 0 : _a.length) === rowCount);\n    }\n\n    initPageHandler() {\n      if (!this._subscription) {\n        this._subscription = this.getPageChangeObservable().subscribe(() => {\n          setTimeout(() => {\n            if (this._isIterating) {\n              this.extractDataOnCurrentPage();\n\n              if (this.hasNextPage()) {\n                this.nextPage();\n              } else {\n                this._isIterating = false;\n                this.goToPage(this._initialPageIndex);\n              }\n            } else if (this._isExporting) {\n              this._isExporting = false;\n              this.extractTableFooter();\n              this.exportExtractedData();\n            }\n          });\n        });\n      }\n    }\n\n    exportExtractedData() {\n      this._exporterService.export(this._data, this._options);\n\n      this._data = new Array();\n      this.exportCompleted.emit();\n    }\n\n    extractSpecialRows(outlet) {\n      this._data.push(...this.dataExtractor.extractRows(this._cdkTable, this.hiddenColumns, outlet));\n    }\n\n    extractTableHeader() {\n      this.extractSpecialRows(this._cdkTable._headerRowOutlet);\n    }\n\n    extractTableFooter() {\n      this.extractSpecialRows(this._cdkTable._footerRowOutlet);\n    }\n\n    hasNextPage() {\n      if (this.getCurrentPageIndex() < this.getPageCount() - 1) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    nextPage() {\n      this.goToPage(this.getCurrentPageIndex() + 1);\n    }\n\n    getPaginatedRowIndex(index) {\n      return index + this.getPageSize() * this.getCurrentPageIndex();\n    }\n\n  }\n\n  CdkTableExporter.ɵfac = function CdkTableExporter_Factory(t) {\n    return new (t || CdkTableExporter)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ServiceLocatorService), ɵngcc0.ɵɵdirectiveInject(DataExtractorService), ɵngcc0.ɵɵdirectiveInject(undefined));\n  };\n\n  CdkTableExporter.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkTableExporter,\n    inputs: {\n      hiddenColumns: \"hiddenColumns\",\n      exporter: \"exporter\"\n    },\n    outputs: {\n      exportCompleted: \"exportCompleted\",\n      exportStarted: \"exportStarted\"\n    }\n  });\n  return CdkTableExporter;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\r\n * Public API Surface of cdk-table-exporter\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { BOM, CHAR_SET_UTF, CHAR_SET_UTF_8, COMMA, CONTENT_TYPE_APPLICATION, CONTENT_TYPE_EXCEL, CONTENT_TYPE_TEXT, CdkTableExporter, CdkTableExporterModule, CsvExporterService, DOT, DataExtractorService, EXTENSION_CSV, EXTENSION_JSON, EXTENSION_TEXT, EXTENSION_XLS, EXTENSION_XLSX, ExportType, FileExporter, FileUtil, JsonExporterService, MAT_TABLE_EXPORTER, MIME_CSV, MIME_EXCEL_XLS, MIME_EXCEL_XLSX, MIME_JSON, MIME_TXT, Mime, REF, RETURN, ServiceLocatorService, TAB, TYPE_ARRAY, TxtExporterService, WorksheetExporter, XLSX_COLS, XLSX_LIGHTWEIGHT, XLS_REGEX, XlsExporterService, XlsxExporterService, SheetjsHelperService as ɵa }; //# sourceMappingURL=cdk-table-exporter.js.map","map":null,"metadata":{},"sourceType":"module"}