{"ast":null,"code":"import { of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    /**\n     * Constructor\n     */\n    constructor(_httpClient) {\n      this._httpClient = _httpClient;\n      this._authenticated = false;\n    } // -----------------------------------------------------------------------------------------------------\n    // @ Accessors\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Setter & getter for access token\n     */\n\n\n    set accessToken(token) {\n      localStorage.setItem('accessToken', token);\n    }\n\n    get accessToken() {\n      var _a;\n\n      return (_a = localStorage.getItem('accessToken')) !== null && _a !== void 0 ? _a : '';\n    }\n\n    set refreshToken(refreshToken) {\n      localStorage.setItem('refreshToken', refreshToken);\n    }\n\n    get refreshToken() {\n      var _a;\n\n      return (_a = localStorage.getItem('refreshToken')) !== null && _a !== void 0 ? _a : '';\n    }\n\n    set expirationTime(value) {\n      localStorage.setItem('expirationTime', value);\n    }\n\n    get expirationTimeToken() {\n      var _a;\n\n      return (_a = localStorage.getItem('expirationTime')) !== null && _a !== void 0 ? _a : '';\n    } // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Forgot password\n     *\n     * @param username\n     */\n\n\n    forgotPassword(username) {\n      return this._httpClient.post(`${environment.hostApi}/users/forgot-password`, {\n        username: username\n      });\n    }\n    /**\n     * Reset password\n     *\n     * @param password\n     */\n\n\n    resetPassword(password, token) {\n      return this._httpClient.post(`${environment.hostApi}/users/reset-password`, {\n        password: password,\n        token_reset: token\n      });\n    }\n    /**\n     * Sign in\n     *\n     * @param credentials\n     */\n\n\n    signIn(credentials) {\n      console.log(credentials);\n      return this._httpClient.post(`${environment.hostApi}/signin`, credentials).pipe(switchMap(response => {\n        // Store the access token in the local storage\n        this.accessToken = response.token; // Set the authenticated flag to true\n\n        this._authenticated = true;\n        return of(response);\n      }));\n    }\n    /**\n     * Refresh token expired\n     */\n\n\n    refreshTokenApi() {\n      // Renew token\n      return this._httpClient.post(`${environment.hostApi}/refresh`, {}).pipe(catchError(() => {\n        // Return false\n        return of(false);\n      }), switchMap(response => {\n        // Store the access token in the local storage\n        this.accessToken = response.token.token; // Set the authenticated flag to true\n\n        this._authenticated = true; // Return true\n\n        return of(true);\n      }));\n    }\n    /**\n     * Sign out\n     */\n\n\n    signOut() {\n      // Remove the access token from the local storage\n      localStorage.removeItem('accessToken');\n      localStorage.removeItem('refreshToken');\n      localStorage.removeItem('expirationTime'); // Set the authenticated flag to false\n\n      this._authenticated = false; // Return the observable\n\n      return of(true);\n    }\n    /**\n     * Sign up\n     *\n     * @param user\n     */\n\n\n    signUp(user) {\n      return this._httpClient.post('auth/sign-up', user);\n    }\n    /**\n     * Unlock session\n     *\n     * @param credentials\n     */\n\n\n    unlockSession(credentials) {\n      return this._httpClient.post('auth/unlock-session', credentials);\n    }\n    /**\n     * Check the authentication status\n     */\n\n\n    check() {\n      // Check the access token availability\n      if (!this.accessToken) {\n        return of(false);\n      } // Check if the user is logged in\n\n\n      if (this._authenticated) {\n        return of(true);\n      }\n\n      return of(true);\n    }\n    /**\n     * Check allowed permission of access in specific component\n     * @param payload\n     */\n\n\n    signInPermissionOfComponent(payload) {\n      return this._httpClient.post(`${environment.hostApi}/rule/allowed`, payload).pipe(switchMap(response => {\n        // Return a new observable with the response\n        return of(response);\n      }));\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}