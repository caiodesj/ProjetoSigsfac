{"ast":null,"code":"import { of } from \"rxjs\";\nimport { switchMap } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../auth/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport let AuthGuard = /*#__PURE__*/(() => {\n  class AuthGuard {\n    /**\n     * Constructor\n     */\n    constructor(_authService, _router) {\n      this._authService = _authService;\n      this._router = _router;\n    } // -----------------------------------------------------------------------------------------------------\n    // @ Private methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Check the authenticated status\n     *\n     * @param redirectURL\n     * @private\n     */\n\n\n    _check(redirectURL) {\n      // Check the authentication status\n      return this._authService.check().pipe(switchMap(user => {\n        // If the user is not authenticated...\n        if (!user) {\n          // Redirect to the sign-in page\n          this._router.navigate([\"login\"], {\n            queryParams: {\n              redirectURL\n            }\n          }); // Prevent the access\n\n\n          return of(false);\n        } // Allow the access\n\n\n        return of(true);\n      }));\n    } // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Can activate\n     *\n     * @param route\n     * @param state\n     */\n\n\n    canActivate(route, state) {\n      const redirectUrl = state.url === \"/sign-out\" ? \"/\" : state.url;\n      return this._check(redirectUrl);\n    }\n    /**\n     * Can activate child\n     *\n     * @param childRoute\n     * @param state\n     */\n\n\n    canActivateChild(childRoute, state) {\n      const redirectUrl = state.url === \"/sign-out\" ? \"/\" : state.url;\n      return this._check(redirectUrl);\n    }\n    /**\n     * Can load\n     *\n     * @param route\n     * @param segments\n     */\n\n\n    canLoad(route, segments) {\n      return this._check(\"/\");\n    }\n\n  }\n\n  AuthGuard.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac,\n    providedIn: \"root\"\n  });\n  return AuthGuard;\n})();","map":null,"metadata":{},"sourceType":"module"}